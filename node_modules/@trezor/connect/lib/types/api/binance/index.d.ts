import { PROTO } from '../../../constants';
import { Static } from '@trezor/schema-utils';
export type BinanceSDKTransaction = Static<typeof BinanceSDKTransaction>;
export declare const BinanceSDKTransaction: import("@trezor/schema-utils").TObject<{
    chain_id: import("@sinclair/typebox").TString;
    account_number: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TNumber>;
    memo: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    sequence: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TNumber>;
    source: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TNumber>;
    transfer: import("@sinclair/typebox").TOptional<import("@trezor/schema-utils").TObject<{
        inputs: import("@sinclair/typebox").TArray<import("@trezor/schema-utils").TObject<{
            address: import("@sinclair/typebox").TString;
            coins: import("@sinclair/typebox").TArray<import("@trezor/schema-utils").TObject<{
                amount: import("@trezor/schema-utils/lib/custom-types/uint").TUint;
                denom: import("@sinclair/typebox").TString;
            }>>;
        }>>;
        outputs: import("@sinclair/typebox").TArray<import("@trezor/schema-utils").TObject<{
            address: import("@sinclair/typebox").TString;
            coins: import("@sinclair/typebox").TArray<import("@trezor/schema-utils").TObject<{
                amount: import("@trezor/schema-utils/lib/custom-types/uint").TUint;
                denom: import("@sinclair/typebox").TString;
            }>>;
        }>>;
        chunkify: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TBoolean>;
    }>>;
    placeOrder: import("@sinclair/typebox").TOptional<import("@trezor/schema-utils").TObject<{
        id: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
        ordertype: import("@sinclair/typebox").TEnum<typeof PROTO.BinanceOrderType>;
        price: import("@sinclair/typebox").TNumber;
        quantity: import("@sinclair/typebox").TNumber;
        sender: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
        side: import("@sinclair/typebox").TEnum<typeof PROTO.BinanceOrderSide>;
        symbol: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
        timeinforce: import("@sinclair/typebox").TEnum<typeof PROTO.BinanceTimeInForce>;
    }>>;
    cancelOrder: import("@sinclair/typebox").TOptional<import("@trezor/schema-utils").TObject<{
        refid: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
        sender: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
        symbol: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    }>>;
}>;
export type BinancePreparedMessage = Static<typeof BinancePreparedMessage>;
export declare const BinancePreparedMessage: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TIntersect<[import("@trezor/schema-utils").TObject<{
    inputs: import("@sinclair/typebox").TArray<import("@trezor/schema-utils").TObject<{
        address: import("@sinclair/typebox").TString;
        coins: import("@sinclair/typebox").TArray<import("@trezor/schema-utils").TObject<{
            amount: import("@trezor/schema-utils/lib/custom-types/uint").TUint;
            denom: import("@sinclair/typebox").TString;
        }>>;
    }>>;
    outputs: import("@sinclair/typebox").TArray<import("@trezor/schema-utils").TObject<{
        address: import("@sinclair/typebox").TString;
        coins: import("@sinclair/typebox").TArray<import("@trezor/schema-utils").TObject<{
            amount: import("@trezor/schema-utils/lib/custom-types/uint").TUint;
            denom: import("@sinclair/typebox").TString;
        }>>;
    }>>;
    chunkify: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TBoolean>;
}>, import("@trezor/schema-utils").TObject<{
    type: import("@sinclair/typebox").TLiteral<"BinanceTransferMsg">;
}>]>, import("@sinclair/typebox").TIntersect<[import("@trezor/schema-utils").TObject<{
    id: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    ordertype: import("@sinclair/typebox").TEnum<typeof PROTO.BinanceOrderType>;
    price: import("@sinclair/typebox").TNumber;
    quantity: import("@sinclair/typebox").TNumber;
    sender: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    side: import("@sinclair/typebox").TEnum<typeof PROTO.BinanceOrderSide>;
    symbol: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    timeinforce: import("@sinclair/typebox").TEnum<typeof PROTO.BinanceTimeInForce>;
}>, import("@trezor/schema-utils").TObject<{
    type: import("@sinclair/typebox").TLiteral<"BinanceOrderMsg">;
}>]>, import("@sinclair/typebox").TIntersect<[import("@trezor/schema-utils").TObject<{
    refid: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    sender: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    symbol: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
}>, import("@trezor/schema-utils").TObject<{
    type: import("@sinclair/typebox").TLiteral<"BinanceCancelMsg">;
}>]>]>;
export type BinancePreparedTransaction = Static<typeof BinancePreparedTransaction>;
export declare const BinancePreparedTransaction: import("@sinclair/typebox").TIntersect<[import("@trezor/schema-utils").TObject<{
    chain_id: import("@sinclair/typebox").TString;
    account_number: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TNumber>;
    memo: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    sequence: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TNumber>;
    source: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TNumber>;
    transfer: import("@sinclair/typebox").TOptional<import("@trezor/schema-utils").TObject<{
        inputs: import("@sinclair/typebox").TArray<import("@trezor/schema-utils").TObject<{
            address: import("@sinclair/typebox").TString;
            coins: import("@sinclair/typebox").TArray<import("@trezor/schema-utils").TObject<{
                amount: import("@trezor/schema-utils/lib/custom-types/uint").TUint;
                denom: import("@sinclair/typebox").TString;
            }>>;
        }>>;
        outputs: import("@sinclair/typebox").TArray<import("@trezor/schema-utils").TObject<{
            address: import("@sinclair/typebox").TString;
            coins: import("@sinclair/typebox").TArray<import("@trezor/schema-utils").TObject<{
                amount: import("@trezor/schema-utils/lib/custom-types/uint").TUint;
                denom: import("@sinclair/typebox").TString;
            }>>;
        }>>;
        chunkify: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TBoolean>;
    }>>;
    placeOrder: import("@sinclair/typebox").TOptional<import("@trezor/schema-utils").TObject<{
        id: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
        ordertype: import("@sinclair/typebox").TEnum<typeof PROTO.BinanceOrderType>;
        price: import("@sinclair/typebox").TNumber;
        quantity: import("@sinclair/typebox").TNumber;
        sender: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
        side: import("@sinclair/typebox").TEnum<typeof PROTO.BinanceOrderSide>;
        symbol: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
        timeinforce: import("@sinclair/typebox").TEnum<typeof PROTO.BinanceTimeInForce>;
    }>>;
    cancelOrder: import("@sinclair/typebox").TOptional<import("@trezor/schema-utils").TObject<{
        refid: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
        sender: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
        symbol: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    }>>;
}>, import("@trezor/schema-utils").TObject<{
    messages: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TIntersect<[import("@trezor/schema-utils").TObject<{
        inputs: import("@sinclair/typebox").TArray<import("@trezor/schema-utils").TObject<{
            address: import("@sinclair/typebox").TString;
            coins: import("@sinclair/typebox").TArray<import("@trezor/schema-utils").TObject<{
                amount: import("@trezor/schema-utils/lib/custom-types/uint").TUint;
                denom: import("@sinclair/typebox").TString;
            }>>;
        }>>;
        outputs: import("@sinclair/typebox").TArray<import("@trezor/schema-utils").TObject<{
            address: import("@sinclair/typebox").TString;
            coins: import("@sinclair/typebox").TArray<import("@trezor/schema-utils").TObject<{
                amount: import("@trezor/schema-utils/lib/custom-types/uint").TUint;
                denom: import("@sinclair/typebox").TString;
            }>>;
        }>>;
        chunkify: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TBoolean>;
    }>, import("@trezor/schema-utils").TObject<{
        type: import("@sinclair/typebox").TLiteral<"BinanceTransferMsg">;
    }>]>, import("@sinclair/typebox").TIntersect<[import("@trezor/schema-utils").TObject<{
        id: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
        ordertype: import("@sinclair/typebox").TEnum<typeof PROTO.BinanceOrderType>;
        price: import("@sinclair/typebox").TNumber;
        quantity: import("@sinclair/typebox").TNumber;
        sender: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
        side: import("@sinclair/typebox").TEnum<typeof PROTO.BinanceOrderSide>;
        symbol: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
        timeinforce: import("@sinclair/typebox").TEnum<typeof PROTO.BinanceTimeInForce>;
    }>, import("@trezor/schema-utils").TObject<{
        type: import("@sinclair/typebox").TLiteral<"BinanceOrderMsg">;
    }>]>, import("@sinclair/typebox").TIntersect<[import("@trezor/schema-utils").TObject<{
        refid: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
        sender: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
        symbol: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    }>, import("@trezor/schema-utils").TObject<{
        type: import("@sinclair/typebox").TLiteral<"BinanceCancelMsg">;
    }>]>]>>;
    account_number: import("@sinclair/typebox").TNumber;
    sequence: import("@sinclair/typebox").TNumber;
    source: import("@sinclair/typebox").TNumber;
}>]>;
export type BinanceSignTransaction = Static<typeof BinanceSignTransaction>;
export declare const BinanceSignTransaction: import("@trezor/schema-utils").TObject<{
    path: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TString, import("@sinclair/typebox").TArray<import("@sinclair/typebox").TNumber>]>;
    transaction: import("@trezor/schema-utils").TObject<{
        chain_id: import("@sinclair/typebox").TString;
        account_number: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TNumber>;
        memo: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
        sequence: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TNumber>;
        source: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TNumber>;
        transfer: import("@sinclair/typebox").TOptional<import("@trezor/schema-utils").TObject<{
            inputs: import("@sinclair/typebox").TArray<import("@trezor/schema-utils").TObject<{
                address: import("@sinclair/typebox").TString;
                coins: import("@sinclair/typebox").TArray<import("@trezor/schema-utils").TObject<{
                    amount: import("@trezor/schema-utils/lib/custom-types/uint").TUint;
                    denom: import("@sinclair/typebox").TString;
                }>>;
            }>>;
            outputs: import("@sinclair/typebox").TArray<import("@trezor/schema-utils").TObject<{
                address: import("@sinclair/typebox").TString;
                coins: import("@sinclair/typebox").TArray<import("@trezor/schema-utils").TObject<{
                    amount: import("@trezor/schema-utils/lib/custom-types/uint").TUint;
                    denom: import("@sinclair/typebox").TString;
                }>>;
            }>>;
            chunkify: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TBoolean>;
        }>>;
        placeOrder: import("@sinclair/typebox").TOptional<import("@trezor/schema-utils").TObject<{
            id: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
            ordertype: import("@sinclair/typebox").TEnum<typeof PROTO.BinanceOrderType>;
            price: import("@sinclair/typebox").TNumber;
            quantity: import("@sinclair/typebox").TNumber;
            sender: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
            side: import("@sinclair/typebox").TEnum<typeof PROTO.BinanceOrderSide>;
            symbol: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
            timeinforce: import("@sinclair/typebox").TEnum<typeof PROTO.BinanceTimeInForce>;
        }>>;
        cancelOrder: import("@sinclair/typebox").TOptional<import("@trezor/schema-utils").TObject<{
            refid: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
            sender: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
            symbol: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
        }>>;
    }>;
    chunkify: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TBoolean>;
}>;
//# sourceMappingURL=index.d.ts.map