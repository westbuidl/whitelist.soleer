import { AbstractTransportMethodParams, AbstractTransportParams } from './abstract';
import { AbstractApiTransport } from './abstractApi';
type WebUsbTransportParams = AbstractTransportParams & {
    sessionsBackgroundUrl?: string;
};
export declare class WebUsbTransport extends AbstractApiTransport {
    name: "WebUsbTransport";
    private readonly sessionsBackgroundUrl;
    constructor({ messages, logger, sessionsBackgroundUrl }: WebUsbTransportParams);
    init({ signal }?: AbstractTransportMethodParams<'init'>): Promise<import("../sessions/types").HandshakeResponse | {
        success: false;
        error: NonNullable<"Aborted by signal" | "Aborted by timeout">;
        message: string | undefined;
    } | {
        success: false;
        error: "unexpected error";
        message: string;
    }>;
    listen(): import("../types").Success<undefined> | {
        success: false;
        error: "already listening";
        message: string | undefined;
    };
}
export {};
//# sourceMappingURL=webusb.browser.d.ts.map